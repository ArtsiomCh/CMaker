/* The following code was generated by JFlex 1.4.3 on 11.01.15 0:33 */

package cmake.parsing;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static cmake.psi.CMakeTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11.01.15 0:33 from the specification file
 * <tt>/Users/alex/IdeaProjects/CMaker/grammar/_CMakeLexer.flex</tt>
 */
public class _CMakeLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\1\1\0\1\55"+
    "\1\41\1\45\3\0\1\53\1\54\3\0\1\50\1\26\1\0\12\25"+
    "\1\0\1\57\1\0\1\43\2\0\1\56\1\36\2\47\1\47\1\35"+
    "\1\31\5\47\1\37\1\47\1\30\1\27\2\47\1\33\1\40\1\32"+
    "\1\34\5\47\1\42\1\52\1\44\1\56\1\50\1\0\1\17\1\47"+
    "\1\10\1\5\1\3\1\6\1\24\1\21\1\12\2\47\1\14\1\16"+
    "\1\4\1\13\1\23\1\47\1\20\1\15\1\11\1\7\1\47\1\22"+
    "\3\47\1\46\1\0\1\51\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\7\3\1\4\3\3\1\5\2\2"+
    "\1\6\1\7\1\10\1\2\4\3\1\11\4\3\1\4"+
    "\1\12\3\3\2\5\3\0\1\13\1\6\1\14\1\0"+
    "\1\15\12\3\1\5\2\0\4\3\1\16\6\3\1\0"+
    "\1\5\1\17\1\20\2\3\1\21\7\3\1\22\1\23"+
    "\1\0\1\24\4\3\1\16\2\3\1\25\1\3\1\24"+
    "\5\3\1\26\2\3\1\27\1\30\1\31\3\3\1\32"+
    "\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\60\0\60\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\300\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\300"+
    "\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u02d0\0\u0660"+
    "\0\60\0\60\0\60\0\u0360\0\60\0\u0690\0\u06c0\0\u06f0"+
    "\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870"+
    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u08a0"+
    "\0\60\0\u0b70\0\u0ba0\0\300\0\u0bd0\0\u0c00\0\u0c30\0\u0c60"+
    "\0\u0c90\0\u0cc0\0\u0cf0\0\300\0\300\0\u0d20\0\u0b40\0\u0d50"+
    "\0\u0d80\0\u0db0\0\u0de0\0\300\0\u0e10\0\u0e40\0\300\0\u0e70"+
    "\0\u0d20\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\300\0\u0f90"+
    "\0\u0fc0\0\300\0\300\0\300\0\u0ff0\0\u1020\0\u1050\0\300"+
    "\0\300";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\2\5\1\6\3\5\1\7\1\10"+
    "\2\5\1\11\3\5\1\12\2\5\1\13\1\2\1\14"+
    "\1\5\1\15\1\16\6\5\1\17\1\20\2\2\1\21"+
    "\1\2\1\5\2\2\1\22\1\23\1\24\1\25\2\2"+
    "\61\0\2\3\60\0\1\5\1\26\7\5\1\27\11\5"+
    "\1\0\12\5\6\0\2\5\12\0\23\5\1\0\12\5"+
    "\6\0\2\5\12\0\4\5\1\30\3\5\1\31\12\5"+
    "\1\0\12\5\6\0\2\5\12\0\3\5\1\32\17\5"+
    "\1\0\12\5\6\0\2\5\12\0\20\5\1\33\2\5"+
    "\1\0\12\5\6\0\2\5\12\0\1\34\13\5\1\35"+
    "\6\5\1\0\12\5\6\0\2\5\12\0\16\5\1\36"+
    "\4\5\1\0\12\5\6\0\2\5\34\0\1\13\1\37"+
    "\34\0\23\5\1\0\1\5\1\40\1\41\7\5\6\0"+
    "\2\5\12\0\23\5\1\0\7\5\1\42\2\5\6\0"+
    "\2\5\12\0\23\5\1\0\4\5\1\43\5\5\6\0"+
    "\2\5\7\0\2\44\1\0\37\44\1\45\15\44\42\0"+
    "\1\46\1\47\62\0\1\50\15\0\1\51\4\0\1\51"+
    "\6\0\1\51\20\0\1\52\3\0\1\52\4\0\5\52"+
    "\1\53\55\54\1\55\2\54\3\0\2\5\1\56\20\5"+
    "\1\0\12\5\6\0\2\5\12\0\12\5\1\57\10\5"+
    "\1\0\12\5\6\0\2\5\12\0\1\5\1\60\21\5"+
    "\1\0\12\5\6\0\2\5\12\0\15\5\1\61\5\5"+
    "\1\0\12\5\6\0\2\5\12\0\6\5\1\62\14\5"+
    "\1\0\12\5\6\0\2\5\12\0\12\5\1\63\10\5"+
    "\1\0\12\5\6\0\2\5\12\0\5\5\1\64\15\5"+
    "\1\0\12\5\6\0\2\5\12\0\7\5\1\65\13\5"+
    "\1\0\12\5\6\0\2\5\34\0\1\37\35\0\23\5"+
    "\1\0\2\5\1\40\7\5\6\0\2\5\12\0\23\5"+
    "\1\0\10\5\1\66\1\5\6\0\2\5\12\0\23\5"+
    "\1\0\5\5\1\67\4\5\6\0\2\5\7\0\2\44"+
    "\1\0\57\44\1\0\37\44\1\70\1\45\14\44\44\46"+
    "\1\71\13\46\3\0\22\72\2\0\12\72\6\0\1\72"+
    "\13\0\3\5\1\73\3\5\1\74\3\5\1\75\3\5"+
    "\1\76\3\5\1\0\12\5\6\0\2\5\12\0\1\77"+
    "\22\5\1\0\12\5\6\0\2\5\12\0\5\5\1\100"+
    "\15\5\1\0\12\5\6\0\2\5\12\0\1\101\22\5"+
    "\1\0\12\5\6\0\2\5\12\0\7\5\1\102\13\5"+
    "\1\0\12\5\6\0\2\5\12\0\12\5\1\103\10\5"+
    "\1\0\12\5\6\0\2\5\12\0\15\5\1\104\5\5"+
    "\1\0\12\5\6\0\2\5\12\0\11\5\1\105\11\5"+
    "\1\0\12\5\6\0\2\5\12\0\23\5\1\0\11\5"+
    "\1\67\6\0\2\5\12\0\23\5\1\0\6\5\1\40"+
    "\3\5\6\0\2\5\7\0\2\70\1\106\41\70\1\107"+
    "\13\70\43\46\1\71\1\110\13\46\3\0\23\72\1\0"+
    "\12\72\6\0\2\72\1\111\11\0\4\5\1\112\3\5"+
    "\1\113\12\5\1\0\12\5\6\0\2\5\12\0\3\5"+
    "\1\114\17\5\1\0\12\5\6\0\2\5\12\0\14\5"+
    "\1\115\6\5\1\0\12\5\6\0\2\5\12\0\16\5"+
    "\1\116\4\5\1\0\12\5\6\0\2\5\12\0\7\5"+
    "\1\117\13\5\1\0\12\5\6\0\2\5\12\0\6\5"+
    "\1\120\14\5\1\0\12\5\6\0\2\5\12\0\14\5"+
    "\1\121\6\5\1\0\12\5\6\0\2\5\12\0\10\5"+
    "\1\122\12\5\1\0\12\5\6\0\2\5\12\0\14\5"+
    "\1\123\6\5\1\0\12\5\6\0\2\5\12\0\10\5"+
    "\1\124\12\5\1\0\12\5\6\0\2\5\12\0\1\125"+
    "\22\5\1\0\12\5\6\0\2\5\7\0\44\106\1\126"+
    "\13\106\2\70\1\106\40\70\1\107\1\127\13\70\3\0"+
    "\1\5\1\130\21\5\1\0\12\5\6\0\2\5\12\0"+
    "\15\5\1\131\5\5\1\0\12\5\6\0\2\5\12\0"+
    "\5\5\1\132\15\5\1\0\12\5\6\0\2\5\12\0"+
    "\7\5\1\133\13\5\1\0\12\5\6\0\2\5\12\0"+
    "\3\5\1\134\17\5\1\0\12\5\6\0\2\5\12\0"+
    "\7\5\1\135\13\5\1\0\12\5\6\0\2\5\12\0"+
    "\5\5\1\136\15\5\1\0\12\5\6\0\2\5\12\0"+
    "\1\5\1\137\21\5\1\0\12\5\6\0\2\5\12\0"+
    "\21\5\1\140\1\5\1\0\12\5\6\0\2\5\7\0"+
    "\43\106\1\126\1\141\13\106\3\0\5\5\1\142\15\5"+
    "\1\0\12\5\6\0\2\5\12\0\1\143\22\5\1\0"+
    "\12\5\6\0\2\5\12\0\15\5\1\144\5\5\1\0"+
    "\12\5\6\0\2\5\12\0\11\5\1\145\11\5\1\0"+
    "\12\5\6\0\2\5\12\0\10\5\1\146\12\5\1\0"+
    "\12\5\6\0\2\5\12\0\16\5\1\147\4\5\1\0"+
    "\12\5\6\0\2\5\12\0\1\137\22\5\1\0\12\5"+
    "\6\0\2\5\12\0\6\5\1\150\14\5\1\0\12\5"+
    "\6\0\2\5\12\0\14\5\1\151\6\5\1\0\12\5"+
    "\6\0\2\5\12\0\10\5\1\152\12\5\1\0\12\5"+
    "\6\0\2\5\12\0\1\153\22\5\1\0\12\5\6\0"+
    "\2\5\12\0\1\5\1\154\21\5\1\0\12\5\6\0"+
    "\2\5\12\0\7\5\1\155\13\5\1\0\12\5\6\0"+
    "\2\5\12\0\5\5\1\156\15\5\1\0\12\5\6\0"+
    "\2\5\12\0\10\5\1\157\12\5\1\0\12\5\6\0"+
    "\2\5\12\0\16\5\1\160\4\5\1\0\12\5\6\0"+
    "\2\5\12\0\1\5\1\161\21\5\1\0\12\5\6\0"+
    "\2\5\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4224];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\20\1\2\11\21\1\3\0\3\11\1\0"+
    "\1\11\13\1\2\0\13\1\1\0\2\1\1\11\14\1"+
    "\1\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _CMakeLexer() {
    this((java.io.Reader)null);
  }


  public _CMakeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CMakeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { return FOREACH;
          }
        case 28: break;
        case 7: 
          { return LPAR;
          }
        case 29: break;
        case 15: 
          { return BRACKET_ARGUMENT;
          }
        case 30: break;
        case 5: 
          { return LINE_COMMENT;
          }
        case 31: break;
        case 23: 
          { return ENDMACRO;
          }
        case 32: break;
        case 13: 
          { return QUOTED_ARGUMENT;
          }
        case 33: break;
        case 9: 
          { return IF;
          }
        case 34: break;
        case 12: 
          { return ESCAPE_SEMICOLON;
          }
        case 35: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 36: break;
        case 26: 
          { return ENDFOREACH;
          }
        case 37: break;
        case 11: 
          { return ESCAPE_ENCODED;
          }
        case 38: break;
        case 27: 
          { return ENDFUNCTION;
          }
        case 39: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 40: break;
        case 25: 
          { return FUNCTION;
          }
        case 41: break;
        case 10: 
          { return BOOL;
          }
        case 42: break;
        case 16: 
          { return VAR_REF;
          }
        case 43: break;
        case 6: 
          { return ESCAPE_IDENTITY;
          }
        case 44: break;
        case 19: 
          { return WHILE;
          }
        case 45: break;
        case 14: 
          { return ELSEIFORELSE;
          }
        case 46: break;
        case 21: 
          { return KEYWORD;
          }
        case 47: break;
        case 18: 
          { return MACRO;
          }
        case 48: break;
        case 8: 
          { return RPAR;
          }
        case 49: break;
        case 17: 
          { return ENDIF;
          }
        case 50: break;
        case 20: 
          { return BRACKET_COMMENT;
          }
        case 51: break;
        case 4: 
          { return NUMBER;
          }
        case 52: break;
        case 24: 
          { return ENDWHILE;
          }
        case 53: break;
        case 1: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 54: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
